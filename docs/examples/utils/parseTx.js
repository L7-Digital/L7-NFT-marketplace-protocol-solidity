const abiDecoder = require("abi-decoder"); // NodeJS

function convertParamsHelper(original) {
    let ret = {}

    for (let k in original) {
        ret[original[k].name] = original[k].value;
    }

    return ret
}

function parseOrder(data) {
    const params = convertParamsHelper(data.params);

    if (data.name === 'cancelOrder_')
        return {
            exchange: params.addrs[0],
            maker: params.addrs[1],
            taker: params.addrs[2],
            makerRelayerFee: params.uints[0],
            takerRelayerFee: params.uints[1],
            makerProtocolFee: params.uints[2],
            takerProtocolFee: params.uints[3],
            feeRecipient: params.addrs[3],
            feeMethod: params.feeMethod,
            side: params.side,
            saleKind: params.saleKind,
            target: params.addrs[4],
            howToCall: params.howToCall,
            calldata: params.callData,
            replacementPattern: params.replacementPattern,
            staticTarget: params.addrs[5],
            staticExtradata: params.staticExtradata,
            paymentToken: params.addrs[6],
            basePrice: params.uints[4],
            extra: params.uints[5],
            listingTime: params.uints[6],
            expirationTime: params.uints[7],
            salt: params.uints[8]
        }

    else if (data.name === 'atomicMatch_')
        return {
            'buy' : {
                exchange: params.addrs[0],
                maker: params.addrs[1],
                taker: params.addrs[2],
                makerRelayerFee: params.uints[0],
                takerRelayerFee: params.uints[1],
                makerProtocolFee: params.uints[2],
                takerProtocolFee: params.uints[3],
                feeRecipient: params.addrs[3],
                feeMethod: params.feeMethodsSidesKindsHowToCalls[0],
                side: params.feeMethodsSidesKindsHowToCalls[1],
                saleKind: params.feeMethodsSidesKindsHowToCalls[2],
                target: params.addrs[4],
                howToCall: params.feeMethodsSidesKindsHowToCalls[3],
                calldata: params.callDataBuy,
                replacementPattern: params.replacementPatternBuy,
                staticTarget: params.addrs[5],
                staticExtradata: params.staticExtradataBuy,
                paymentToken: params.addrs[6],
                basePrice: params.uints[4],
                extra: params.uints[5],
                listingTime: params.uints[6],
                expirationTime: params.uints[7],
                salt: params.uints[8],
                sig: {
                    v: params.vs[0],
                    r: params.rssMetadata[0],
                    s: params.rssMetadata[1],
                }
            },
            'sell' : {
                exchange: params.addrs[7],
                maker: params.addrs[8],
                taker: params.addrs[9],
                makerRelayerFee: params.uints[9],
                takerRelayerFee: params.uints[10],
                makerProtocolFee: params.uints[11],
                takerProtocolFee: params.uints[12],
                feeRecipient: params.addrs[10],
                feeMethod: params.feeMethodsSidesKindsHowToCalls[4],
                side: params.feeMethodsSidesKindsHowToCalls[5],
                saleKind: params.feeMethodsSidesKindsHowToCalls[6],
                target: params.addrs[11],
                howToCall: params.feeMethodsSidesKindsHowToCalls[7],
                calldata: params.callDataSell,
                replacementPattern: params.replacementPatternSell,
                staticTarget: params.addrs[12],
                staticExtradata: params.staticExtradataSell,
                paymentToken: params.addrs[13],
                basePrice: params.uints[13],
                extra: params.uints[14],
                listingTime: params.uints[15],
                expirationTime: params.uints[16],
                salt: params.uints[17],
                sig: {
                    v: params.vs[1],
                    r: params.rssMetadata[2],
                    s: params.rssMetadata[3],
                }
            }
        }

    else return null;
}

const cancelOrder_ABI = [{
    inputs: [
        {
            internalType: "address[7]",
            name: "addrs",
            type: "address[7]",
        },
        {
            internalType: "uint256[9]",
            name: "uints",
            type: "uint256[9]",
        },
        {
            internalType: "enum ExchangeCore.FeeMethod",
            name: "feeMethod",
            type: "uint8",
        },
        {
            internalType: "enum SaleKindInterface.Side",
            name: "side",
            type: "uint8",
        },
        {
            internalType: "enum SaleKindInterface.SaleKind",
            name: "saleKind",
            type: "uint8",
        },
        {
            internalType: "enum AuthenticatedProxy.HowToCall",
            name: "howToCall",
            type: "uint8",
        },
        {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
        },
        {
            internalType: "bytes",
            name: "replacementPattern",
            type: "bytes",
        },
        {
            internalType: "bytes",
            name: "staticExtradata",
            type: "bytes",
        },
        {
            internalType: "uint8",
            name: "v",
            type: "uint8",
        },
        {
            internalType: "bytes32",
            name: "r",
            type: "bytes32",
        },
        {
            internalType: "bytes32",
            name: "s",
            type: "bytes32",
        },
    ],
    name: "cancelOrder_",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
}];

const atomicMatch_ABI = [{
    inputs: [
        {
            internalType: "address[14]",
            name: "addrs",
            type: "address[14]",
        },
        {
            internalType: "uint256[18]",
            name: "uints",
            type: "uint256[18]",
        },
        {
            internalType: "uint8[8]",
            name: "feeMethodsSidesKindsHowToCalls",
            type: "uint8[8]",
        },
        {
            internalType: "bytes",
            name: "callDataBuy",
            type: "bytes",
        },
        {
            internalType: "bytes",
            name: "callDataSell",
            type: "bytes",
        },
        {
            internalType: "bytes",
            name: "replacementPatternBuy",
            type: "bytes",
        },
        {
            internalType: "bytes",
            name: "replacementPatternSell",
            type: "bytes",
        },
        {
            internalType: "bytes",
            name: "staticExtradataBuy",
            type: "bytes",
        },
        {
            internalType: "bytes",
            name: "staticExtradataSell",
            type: "bytes",
        },
        {
            internalType: "uint8[2]",
            name: "vs",
            type: "uint8[2]",
        },
        {
            internalType: "bytes32[5]",
            name: "rssMetadata",
            type: "bytes32[5]",
        },
    ],
    name: "atomicMatch_",
    outputs: [],
    stateMutability: "payable",
    type: "function",
}];

abiDecoder.addABI(cancelOrder_ABI);
abiDecoder.addABI(atomicMatch_ABI);

// const cancelOrder_Data = "0xa8a41c70000000000000000000000000f4cad33054f83d6f05ff1adba789864df8b3fec20000000000000000000000008fb951c00c9355bb93a200fb200810fc1556b6320000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000074b701f478ffde83e36f23380f72a36ed3dabc2600000000000000000000000000000000000000000000000000000000000000000000000000000000000000005cb1bb00415eb41d8e218c51f58fa0535489cca100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003782dace9d90000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f29b48540000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034000000000000000000000000000000000000000000000000000000000000004c000000000000000000000000000000000000000000000000000000000000004e0000000000000000000000000000000000000000000000000000000000000001ce3f4d5fc3810f3b8faa7fca1e3dabae4e324ddb19f55dbd7ce50f1f88a6020ad7b8a906571f18f3667c2b49a768f58c32c01623f5a8ae69edf7fc28ed044624e000000000000000000000000000000000000000000000000000000000000014477a9c7ef0000000000000000000000008fb951c00c9355bb93a200fb200810fc1556b632000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000342f697066732f516d624d5445417671576d6b747746714c614846744e676b327954524c626b797062786351386f4d74637a666d700000000000000000000000000000000000000000000000000000000000000000000000000000000000000041dbbd33dc7f0636339b175c573c2507a0b7eaf0e1843c4b3f3dd306662ca2863329b28297e1ee3163cca621c23e8b03a3df03aaf004c24ba70a720878be09b9fe1b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
const atomicMatch_Data = "0xab834bab0000000000000000000000003e8e4a179e9eb8ad5633abd2edd6da8058f57e4f00000000000000000000000003fb6860218b61d38b94b33890ecda3b5e42c52700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e07577082ac981ff3a2f0c403f68893fc25a11a800000000000000000000000000000000000000000000000000000000000000000000000000000000000000005cb1bb00415eb41d8e218c51f58fa0535489cca10000000000000000000000003e8e4a179e9eb8ad5633abd2edd6da8058f57e4f000000000000000000000000050e793e825f6a55452041bea1baef95e425109900000000000000000000000000000000000000000000000000000000000000000000000000000000000000002d3078976bd11fed935b091973421e9fbd833324000000000000000000000000e07577082ac981ff3a2f0c403f68893fc25a11a800000000000000000000000000000000000000000000000000000000000000000000000000000000000000005cb1bb00415eb41d8e218c51f58fa0535489cca100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001bc16d674ec8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ef1bb4e500000000000000000000000000000000000000000000000000000000000000fa0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000674bfdea000000000000000000000000000000000000000000000000000000000000009600000000000000000000000000000000000000000000000000000000000000c200000000000000000000000000000000000000000000000000000000000000c600000000000000000000000000000000000000000000000000000000000000f200000000000000000000000000000000000000000000000000000000000000f60000000000000000000000000000000000000000000000000000000000000001b000000000000000000000000000000000000000000000000000000000000001c1c2b4d963c7306b2b8ccd9887facf75066e107c9e967a65ea10bcbebefbceeeb0d115ff3f76c103a6bbd61256faded7b36849e3c7aad9c468fe434f43a033c89f29833cbbe0c819707da5bce39bbd0ce8f07639e6e80a67456ec1241494fb97670624708f9a55a1ba47a48952f3d7aefc7ab5e470d656fe4c448909952de7c530000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000028aaa

// let decodedData = abiDecoder.decodeMethod(cancelOrder_Data);
// console.log(parseOrder(decodedData));

decodedData = abiDecoder.decodeMethod(atomicMatch_Data);
console.log(parseOrder(decodedData));